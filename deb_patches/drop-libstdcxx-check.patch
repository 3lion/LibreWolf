diff -r 55f4a0a504e4 build/moz.configure/toolchain.configure
--- a/build/moz.configure/toolchain.configure	Wed Mar 18 05:41:31 2020 +0000
+++ b/build/moz.configure/toolchain.configure	Wed Mar 18 07:15:55 2020 +0100
@@ -886,10 +886,6 @@
     return []
 
 
-def minimum_gcc_version():
-    return Version('7.1.0')
-
-
 @template
 def compiler(language, host_or_target, c_compiler=None, other_compiler=None,
              other_c_compiler=None):
@@ -1016,11 +1012,10 @@
             if host_or_target.os == 'Android':
                 raise FatalCheckError('GCC is not supported on Android.\n'
                                       'Please use clang from the Android NDK instead.')
-            gcc_version = minimum_gcc_version()
-            if info.version < gcc_version:
+            if info.version < '7.1.0':
                 raise FatalCheckError(
-                    'Only GCC %d.%d or newer is supported (found version %s).'
-                    % (gcc_version.major, gcc_version.minor, info.version))
+                    'Only GCC 7.1 or newer is supported (found version %s).'
+                    % info.version)
 
         if info.type == 'clang-cl':
             if info.version < '8.0.0':
@@ -1218,45 +1213,6 @@
                         'about the target bitness.')
 
 
-@depends(cxx_compiler, target)
-def needs_libstdcxx_newness_check(cxx_compiler, target):
-    # We only have to care about this on Linux and MinGW.
-    if cxx_compiler.type == 'clang-cl':
-        return
-
-    if target.kernel not in ('Linux', 'WINNT'):
-        return
-
-    if target.os == 'Android':
-        return
-
-    return True
-
-
-def die_on_old_libstdcxx():
-    die('The libstdc++ in use is not new enough.  Please run '
-        './mach bootstrap to update your compiler, or update your system '
-        'libstdc++ installation.')
-
-try_compile(includes=['cstddef'],
-            body='\n'.join([
-                # _GLIBCXX_RELEASE showed up in libstdc++ 7.
-                '#if defined(__GLIBCXX__) && !defined(_GLIBCXX_RELEASE)',
-                '#  error libstdc++ not new enough',
-                '#endif',
-                '#if defined(_GLIBCXX_RELEASE)',
-                '#  if _GLIBCXX_RELEASE < %d' % minimum_gcc_version().major,
-                '#    error libstdc++ not new enough',
-                '#  else',
-                '     (void) 0',
-                '#  endif',
-                '#endif',
-            ]),
-            check_msg='for new enough STL headers from libstdc++',
-            when=needs_libstdcxx_newness_check,
-            onerror=die_on_old_libstdcxx)
-
-
 @depends(c_compiler, target)
 def default_debug_flags(compiler_info, target):
     # Debug info is ON by default.
